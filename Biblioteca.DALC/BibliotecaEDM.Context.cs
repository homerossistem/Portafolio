//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Biblioteca.DALC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HomeroSystemEntities : DbContext
    {
        public HomeroSystemEntities()
            : base("name=HomeroSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BASE_DATOS> BASE_DATOS { get; set; }
        public virtual DbSet<DOCUMENTO> DOCUMENTO { get; set; }
        public virtual DbSet<EQUIPO_TRABAJO> EQUIPO_TRABAJO { get; set; }
        public virtual DbSet<FUNCIONARIO> FUNCIONARIO { get; set; }
        public virtual DbSet<HASH_PASS> HASH_PASS { get; set; }
        public virtual DbSet<HASH_PASS_BASE_DATOS> HASH_PASS_BASE_DATOS { get; set; }
        public virtual DbSet<HASH_PASS_SERVIDOR> HASH_PASS_SERVIDOR { get; set; }
        public virtual DbSet<LENGUAJE> LENGUAJE { get; set; }
        public virtual DbSet<MODULO> MODULO { get; set; }
        public virtual DbSet<MOTOR_BASE_DATOS> MOTOR_BASE_DATOS { get; set; }
        public virtual DbSet<ORGANIZACION> ORGANIZACION { get; set; }
        public virtual DbSet<PROVEEDOR> PROVEEDOR { get; set; }
        public virtual DbSet<RACK> RACK { get; set; }
        public virtual DbSet<ROL> ROL { get; set; }
        public virtual DbSet<SALA_SERVIDORES> SALA_SERVIDORES { get; set; }
        public virtual DbSet<SEGURIDAD> SEGURIDAD { get; set; }
        public virtual DbSet<SENSIBILIDAD> SENSIBILIDAD { get; set; }
        public virtual DbSet<SERVICIOS> SERVICIOS { get; set; }
        public virtual DbSet<SERVIDOR> SERVIDOR { get; set; }
        public virtual DbSet<SISTEMA> SISTEMA { get; set; }
        public virtual DbSet<SISTEMA_OPERATIVO> SISTEMA_OPERATIVO { get; set; }
        public virtual DbSet<SOLUCION> SOLUCION { get; set; }
        public virtual DbSet<TICKET> TICKET { get; set; }
        public virtual DbSet<TIPO> TIPO { get; set; }
        public virtual DbSet<TIPO_NIVEL> TIPO_NIVEL { get; set; }
        public virtual DbSet<TIPO_SERVICIO> TIPO_SERVICIO { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
        public virtual DbSet<AUDITORIA> AUDITORIA { get; set; }
    
        public virtual int INSERTAR_TO_AUDITORIA(Nullable<decimal> iD_AU, string nOM_USUARIO, string eQUIPO_TRABAJO, string nOMBRE_FUNCIONARIO, string iP, string hOSTT, string qUERYY)
        {
            var iD_AUParameter = iD_AU.HasValue ?
                new ObjectParameter("ID_AU", iD_AU) :
                new ObjectParameter("ID_AU", typeof(decimal));
    
            var nOM_USUARIOParameter = nOM_USUARIO != null ?
                new ObjectParameter("NOM_USUARIO", nOM_USUARIO) :
                new ObjectParameter("NOM_USUARIO", typeof(string));
    
            var eQUIPO_TRABAJOParameter = eQUIPO_TRABAJO != null ?
                new ObjectParameter("EQUIPO_TRABAJO", eQUIPO_TRABAJO) :
                new ObjectParameter("EQUIPO_TRABAJO", typeof(string));
    
            var nOMBRE_FUNCIONARIOParameter = nOMBRE_FUNCIONARIO != null ?
                new ObjectParameter("NOMBRE_FUNCIONARIO", nOMBRE_FUNCIONARIO) :
                new ObjectParameter("NOMBRE_FUNCIONARIO", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var hOSTTParameter = hOSTT != null ?
                new ObjectParameter("HOSTT", hOSTT) :
                new ObjectParameter("HOSTT", typeof(string));
    
            var qUERYYParameter = qUERYY != null ?
                new ObjectParameter("QUERYY", qUERYY) :
                new ObjectParameter("QUERYY", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_TO_AUDITORIA", iD_AUParameter, nOM_USUARIOParameter, eQUIPO_TRABAJOParameter, nOMBRE_FUNCIONARIOParameter, iPParameter, hOSTTParameter, qUERYYParameter);
        }
    }
}
